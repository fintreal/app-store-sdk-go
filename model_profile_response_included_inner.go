/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ProfileResponseIncludedInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProfileResponseIncludedInner{}

// ProfileResponseIncludedInner struct for ProfileResponseIncludedInner
type ProfileResponseIncludedInner struct {
	BundleId *BundleId
	Certificate *Certificate
	Device *Device
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ProfileResponseIncludedInner) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'bundleIds'
	if jsonDict["type"] == "bundleIds" {
		// try to unmarshal JSON data into BundleId
		err = json.Unmarshal(data, &dst.BundleId);
		if err == nil {
			jsonBundleId, _ := json.Marshal(dst.BundleId)
			if string(jsonBundleId) == "{}" { // empty struct
				dst.BundleId = nil
			} else {
				return nil // data stored in dst.BundleId, return on the first match
			}
		} else {
			dst.BundleId = nil
		}
	}

	// check if the discriminator value is 'certificates'
	if jsonDict["type"] == "certificates" {
		// try to unmarshal JSON data into Certificate
		err = json.Unmarshal(data, &dst.Certificate);
		if err == nil {
			jsonCertificate, _ := json.Marshal(dst.Certificate)
			if string(jsonCertificate) == "{}" { // empty struct
				dst.Certificate = nil
			} else {
				return nil // data stored in dst.Certificate, return on the first match
			}
		} else {
			dst.Certificate = nil
		}
	}

	// check if the discriminator value is 'devices'
	if jsonDict["type"] == "devices" {
		// try to unmarshal JSON data into Device
		err = json.Unmarshal(data, &dst.Device);
		if err == nil {
			jsonDevice, _ := json.Marshal(dst.Device)
			if string(jsonDevice) == "{}" { // empty struct
				dst.Device = nil
			} else {
				return nil // data stored in dst.Device, return on the first match
			}
		} else {
			dst.Device = nil
		}
	}

	// try to unmarshal JSON data into BundleId
	err = json.Unmarshal(data, &dst.BundleId);
	if err == nil {
		jsonBundleId, _ := json.Marshal(dst.BundleId)
		if string(jsonBundleId) == "{}" { // empty struct
			dst.BundleId = nil
		} else {
			return nil // data stored in dst.BundleId, return on the first match
		}
	} else {
		dst.BundleId = nil
	}

	// try to unmarshal JSON data into Certificate
	err = json.Unmarshal(data, &dst.Certificate);
	if err == nil {
		jsonCertificate, _ := json.Marshal(dst.Certificate)
		if string(jsonCertificate) == "{}" { // empty struct
			dst.Certificate = nil
		} else {
			return nil // data stored in dst.Certificate, return on the first match
		}
	} else {
		dst.Certificate = nil
	}

	// try to unmarshal JSON data into Device
	err = json.Unmarshal(data, &dst.Device);
	if err == nil {
		jsonDevice, _ := json.Marshal(dst.Device)
		if string(jsonDevice) == "{}" { // empty struct
			dst.Device = nil
		} else {
			return nil // data stored in dst.Device, return on the first match
		}
	} else {
		dst.Device = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(ProfileResponseIncludedInner)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ProfileResponseIncludedInner) MarshalJSON() ([]byte, error) {
	if src.BundleId != nil {
		return json.Marshal(&src.BundleId)
	}

	if src.Certificate != nil {
		return json.Marshal(&src.Certificate)
	}

	if src.Device != nil {
		return json.Marshal(&src.Device)
	}

	return nil, nil // no data in anyOf schemas
}

func (src ProfileResponseIncludedInner) ToMap() (map[string]interface{}, error) {
	if src.BundleId != nil {
		return src.BundleId.ToMap()
	}

	if src.Certificate != nil {
		return src.Certificate.ToMap()
	}

	if src.Device != nil {
		return src.Device.ToMap()
	}

    return nil, nil // no data in anyOf schemas
}

type NullableProfileResponseIncludedInner struct {
	value *ProfileResponseIncludedInner
	isSet bool
}

func (v NullableProfileResponseIncludedInner) Get() *ProfileResponseIncludedInner {
	return v.value
}

func (v *NullableProfileResponseIncludedInner) Set(val *ProfileResponseIncludedInner) {
	v.value = val
	v.isSet = true
}

func (v NullableProfileResponseIncludedInner) IsSet() bool {
	return v.isSet
}

func (v *NullableProfileResponseIncludedInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfileResponseIncludedInner(val *ProfileResponseIncludedInner) *NullableProfileResponseIncludedInner {
	return &NullableProfileResponseIncludedInner{value: val, isSet: true}
}

func (v NullableProfileResponseIncludedInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfileResponseIncludedInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


